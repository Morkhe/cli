#использовать "../src/core"
#Использовать asserts

Функция ПолучитьСписокТестов(Знач Тестирование) Экспорт

	юТест = Тестирование;
	
	ИменаТестов = Новый Массив;
	
	ИменаТестов.Добавить("ТестДолжен_ПроверитьВнутреннийМенеджерПараметров");
	ИменаТестов.Добавить("ТестДолжен_ПроверитьВнутреннийМенеджерПараметровОпций");
	
	//ИменаТестов.Добавить("ТестДолжен_ПровертиьЧтениеОпцииИзПроизвольногоФайла");
	//ИменаТестов.Добавить("ТестДолжен_ПроверитьЧтениеАргументаИзПроизвольногоФайла");
	
	Возврат ИменаТестов;

КонецФункции

Процедура ВыполнитьКоманду(Знач Команда) Экспорт

КонецПроцедуры 

Процедура ТестДолжен_ПроверитьВнутреннийМенеджерПараметров() Экспорт

	Приложение = Новый КонсольноеПриложение("testapp", "");

	SRC = Приложение.Аргумент("SRC", "", "Тест").ТМассивСтрок().ВФайле("config.src");
	DST = Приложение.Аргумент("DST", "", "Тест").ВФайле("config.dst");
	
	Приложение.УстановитьСпек("SRC... DST");
	Приложение.УстановитьОсновноеДействие(ЭтотОбъект);

	КаталогПоиска = ОбъединитьПути(ТекущийСценарий().Каталог, "fixtures");

	Приложение.НастроитьМенеджерПараметров(".testapp", КаталогПоиска);

	МассивSRC = Новый Массив;
	МассивSRC.Добавить("src1");
	МассивSRC.Добавить("src2");
	//МассивSRC.Добавить("dst");

	ВходящиеАргументы = Новый Массив;
	//ВходящиеАргументы.Добавить("src1");
	//ВходящиеАргументы.Добавить("src2");
	//ВходящиеАргументы.Добавить("dst");

	Приложение.Запустить(ВходящиеАргументы);
	
	Утверждения.ПроверитьРавенство(SRC.Значение.Количество(), МассивSRC.Количество(), "Аргумент SRC не равен ожидаемому");
	Утверждения.ПроверитьРавенство(DST.Значение, "dst", "Аргумент DST не равен ожидаемому");
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьВнутреннийМенеджерПараметровОпций() Экспорт


	Спек = "";
	ИмяПроцедурыОбъекта = "КомандаПростыеОпции";

	ТестовыеСлучаи = Новый Массив;
	
	ТестовыеСлучаи.Добавить(ТестовыйСлучай("--string Строка", "config.bool;;", "Истина;Строка;0"));
	ТестовыеСлучаи.Добавить(ТестовыйСлучай("--string Строка", ";config.string;", "Ложь;Строка;0"));
	ТестовыеСлучаи.Добавить(ТестовыйСлучай("--int 42", ";;config.int", "Ложь;;42"));
	ТестовыеСлучаи.Добавить(ТестовыйСлучай("--string Строка --bool", "config.bool;config.string;", "Истина;Строка;0"));
	ТестовыеСлучаи.Добавить(ТестовыйСлучай("--int 42 --string Строка --bool", "config.bool;config.string;config.int", "Истина;Строка;42"));
	ТестовыеСлучаи.Добавить(ТестовыйСлучай("", "config.bool;config.string;config.int", "Истина;Строка;42"));

	ПутьКФайлуНастроек = ОбъединитьПути(ТекущийСценарий().Каталог, "fixtures", "simple.json");

	Для каждого Тест Из ТестовыеСлучаи Цикл
		
		Команда = ПодготовитьТестовуюКоманду(Спек, ИмяПроцедурыОбъекта, ПутьКФайлуНастроек);

		ЗначениеБулева =Команда.Опция("bool", Ложь, "Login for credential, e.g. username or email.");
		ЗначениеСтрока = Команда.Опция("string", "", "Realm for credential, e.g. website or WiFi AP name.");
		ЗначениеЧисло = Команда.Опция("int", 0, "Note for credential.");

		УстановитьМестоВФайле(ЗначениеБулева, Тест.ПутьФайле[0]);
		УстановитьМестоВФайле(ЗначениеСтрока, Тест.ПутьФайле[1]);
		УстановитьМестоВФайле(ЗначениеЧисло, Тест.ПутьФайле[2]);

		Команда = ВыполнитьКомандуПриложения(Команда, Тест.Аргументы);

		МассивРезультата = СтрРазделить(Тест.Результат, ";", Истина);

		Утверждения.ПроверитьРавенство(ЗначениеБулева.Значение, Булево(МассивРезультата[0]), "Результаты <ЗначениеБулево> должны совпадать" + СтрСоединить(Тест.Аргументы, " "));
		Утверждения.ПроверитьРавенство(ЗначениеСтрока.Значение, Строка(МассивРезультата[1]), "Результаты <ЗначениеСтрока> должны совпадать" + СтрСоединить(Тест.Аргументы, " "));
		Утверждения.ПроверитьРавенство(ЗначениеЧисло.Значение, Число(МассивРезультата[2]), "Результаты <ЗначениеЧисло> должны совпадать" + СтрСоединить(Тест.Аргументы, " "));
		
	КонецЦикла;
		
КонецПроцедуры

Процедура УстановитьМестоВФайле(КлассПараметра, ПутьИМестовВФайле)

	Если ПустаяСтрока(ПутьИМестовВФайле) Тогда
		Возврат;
	КонецЕсли;
	
	МассивПараметров = СтрРазделить(ПутьИМестовВФайле, "=");

	Если МассивПараметров.Количество() = 2 Тогда
		КлассПараметра.ВФайле(МассивПараметров[1], МассивПараметров[2]);
	Иначе
		КлассПараметра.ВФайле(ПутьИМестовВФайле);
	КонецЕсли;

КонецПроцедуры

Функция ТестовыйСлучай(Знач Аргументы, Знач ПутьФайле, Знач Результат)
	
	Тест = Новый Структура;
	Тест.Вставить("Аргументы", СтрРазделить(Аргументы, " "));
	Тест.Вставить("ПутьФайле", СтрРазделить(ПутьФайле, ";", Истина));
	Тест.Вставить("Результат", Результат);

	Возврат Тест;
КонецФункции


Функция ВыполнитьКомандуПриложения(Команда, Аргументы)
	
	Команда.НачалоЗапуска();
	Попытка
		Команда.Запуск(Аргументы);
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Команда;
	КонецПопытки;
	
	Возврат Команда;

КонецФункции

Функция ПодготовитьТестовуюКоманду(Спек, ИмяПроцедурыОбъекта, ПутьКФайлуНастроек) 

	Приложение = Новый КонсольноеПриложение("testapp", "", ЭтотОбъект);

	Команда = Приложение.ПолучитьКоманду();
	
	Приложение.УстановитьФайлПараметров(ПутьКФайлуНастроек);

	Команда.Спек = Спек;

	Возврат Команда;
	
КонецФункции


Процедура КомандаПростыеОпции(Знач ВыполняемаяКоманда) Экспорт
	
	ВыполняемаяКоманда.Опция("bool", Ложь, "Login for credential, e.g. username or email.");
	ВыполняемаяКоманда.Опция("string", "", "Realm for credential, e.g. website or WiFi AP name.");
	ВыполняемаяКоманда.Опция("int", 0, "Note for credential.");
	
КонецПроцедуры


Функция ИмяФункции()
	
КонецФункции

//Лог = Логирование.ПолучитьЛог("oscript.lib.cli_config");
//ЛогКонфигор = Логирование.ПолучитьЛог("oscript.lib.configor");
Лог = Логирование.ПолучитьЛог("oscript.lib.cli_class_arg");
Лог.УстановитьУровень(УровниЛога.Отладка);

//ЛогКонфигор.УстановитьУровень(УровниЛога.Отладка);